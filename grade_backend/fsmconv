#!/usr/bin/env python2
'''
Created on Nov 5, 2011

@author: ktemkin
'''

import os
import sys
import argparse
import pyparsing
import collections
import xml.etree.ElementTree as ElementTree
import json

class CodeBuilder(object):
    """
        Simple class for building indented code blocks.
    """

    def __init__(self, code='', indent="    "):

        #assume an initial indent level of zero
        self.indent_level = 0

        #and store the given indent
        self.indent = indent

        #start off with an empty block of code
        self.code = code + '\n'

    def __repr__(self):
        return self.code

    def get_code(self):
        return self.code

    def __iadd__(self, line):

        #add the given line, properly formatted at the given indent level
        self.code += (self.indent * self.indent_level) + line + "\n"
        return self

    def start_block(self, line=''):

        #add the given line to the code...
        self += line

        #and increase the indent level
        self.indent_level += 1;

    def end_block(self, line= ''):

        #decrease the indent level
        self.indent_level -= 1

        #add the given line to the code...
        self += line

class JSBuilder(CodeBuilder):

    def add_call(self, name, *args):
        self += name + '(' + ','.join(args) + ');'


class FSM:
    
    def __init__(self, inputs, outputs, moore_outputs, mealy_outputs, states, reset_state):
        
        self.inputs = inputs
        self.outputs = outputs #TODO: deprecate
        self.moore_outputs = moore_outputs
        self.mealy_outputs = mealy_outputs
        self.states = states
        self.reset_state = reset_state
      
    @classmethod
    def from_file(cls, fsm_file):

        _, extension = os.path.splitext(fsm_file.name);

        #if this is a QFSM file, use the from_QFSM factory method
        if extension == '.fsm':
            return cls.from_QFSM(fsm_file)
        elif extension == '.fsmd':
            return cls.from_JSON(fsm_file)
        

    @staticmethod
    def from_QFSM(fsm_file):
    
        #parse the FSM into an XML tree
        tree = ElementTree.parse(fsm_file)
        
        #get a reference to the FSM object, a child of the QFSM project
        fsm = tree.find('machine')    
        
        #create a FSM from the core machine
        return FSM.from_XML(fsm)
        

    @classmethod
    def from_JSON(cls, fsm_file):

        states =  {}
        reset_state = None

        #initialize the inputs and outputs to empty sets
        inputs = set() 
        mealy_outputs = set()
        moore_outputs = set()

        #interpret the raw FSM file saved by FSMDesigner
        raw_fsm = json.load(fsm_file)

        #create each of the state objects in the FSM
        for code, state in enumerate(raw_fsm['nodes']):

            #convert the JSON representation into an FSM state object
            newState = FSMState.from_JSON(state, code) 

            #add the state to our dictionary of states
            states[newState.code] = newState

            #and add the outputs to our list of outputs
            moore_outputs.update(newState.output.keys())

            #if we haven't yet determined a reset state, assume this one
            if reset_state is None:
                reset_state = newState.code


        #and parse each of the links in the FSM
        for link in raw_fsm['links']:
           
            #if we have a reset arc, use it to set the reset state instead of adding it to the FSM
            if link['type'] == 'StartLink':
                reset_state = bin(link['node'])[2:]

            #otherwise, it's a normal arc; parse it, and add it to its _source_ state
            else:
                edge = FSMEdge.from_JSON(link)

                #if the edge has conditions, extract its inputs, and add them to the system's input set
                if edge.condition:
                    inputs.update(inputs_from_algebra(edge.condition))


                states[edge.source].add_edge(edge)

        #create a new Finite State machine from the parsed object
        return cls(inputs, mealy_outputs.union(moore_outputs), list(moore_outputs), list(mealy_outputs), states, reset_state)

        
    @staticmethod
    def from_XML(fsm):
        
        states = {}
        
        #
        # Get a list of the I/O for the machine
        #
        
        
        #get the input names
        inputs = fsm.find('inputnames').text
        
        #if we have no inputs, use an empty list
        if inputs is None:
            inputs = []
            
        #otherwise, split the string into a list
        else:
            inputs = inputs.split(',')
                
                
                
        #get the moore outputs
        outputs = fsm.find('outputnames_moore').text
        
        #if we have no moore outputs, use an empty list
        if outputs is None:
            outputs = []
            
        #otherwise, split the string into a list
        else:
            outputs = outputs.split(',')
        
        #get a copy of the moore outputs
        outputs_moore = outputs[:] 
        
        #get the mealy outputs
        outputs_mealy = fsm.find('outputnames').text
        
        #if we have no mealy outputs, use an empty list
        if outputs_mealy is None:
            outputs_mealy = []
            
        #otherwise, split the string into a list
        else:
            outputs_mealy = outputs_mealy.split(',')
    
        #merge the mealy/moore outputs into one list    
        for output in outputs_mealy:
            outputs.append(output)
        
        #
        # Build a master list of the states; from the HDL's perspective, they form the backbone of the FSM
        #
        
        #for each state in the QFSM description
        for xml_state in fsm.findall('state'):
            
            #convert each XML state into a FSMState object
            state = FSMState.from_XML(xml_state, outputs_moore)
             
            #and add them to our state dictionary, by code
            states[state.code] = state
            
        #
        # Determine the reset state
        #
        reset_state = fsm.attrib['initialstate']
            
        #
        # Add each of the FSM transitions to the state which sources it.
        #
            
        #for each transition in the QFSM description
        for xml_edge in fsm.findall('transition'):
            
            #convert each XML edge into a FSMEdge object
            edge = FSMEdge.from_XML(xml_edge)
            
            #and add it to the source state
            states[edge.source].add_edge(edge)
        
        
        #return a new FSM object
        return FSM(inputs, outputs, outputs_moore, outputs_mealy, states, reset_state)

    def to_javascript(self, state_outputs=None, clock=None, reset=None):
        """
            Converts the given FSM object to a FixedSim representation.
            TODO: Refactor me into a subclass (or something like a Mixin?)
        """

        buf = JSBuilder('//FSM State Definitions')

        #create simple state contants for each of the FSM states
        for code, state in self.states.iteritems():
            buf += "STATE_" + code + " = '" + state.name +"';"

        #start a new line
        buf += ''

        #create a state variable
        buf += "var state = STATE_" + self.reset_state + ";"
        buf += ''

        #initialize the circuit
        buf.start_block('function setup() { ')

        #if a clock has been specified, use it
        if clock:
            buf += "set_clock('" + clock + "');" 

        #if a reset input has been specified, use it
        if reset:
            buf += "set_reset('" + reset + "');"

        buf.end_block('}')
        buf += ''

        #add the reset logic
        buf.start_block('function reset() { ')
        buf += "state = STATE_" + self.reset_state + ";"
        buf.end_block('}')
        buf += ''

        #start the synchronous execution block
        buf += "//Core FSM execution:"
        buf.start_block('function on_clock_edge() {')
        buf.start_block('switch(state) {')

        #enumerate each case in the FSM
        for state in self.states.values():
           
            #for each possible state:
            buf.start_block("case STATE_" + state.code + ":")



            #add a header-style comment
            buf += ''
            buf += "//Determine the next state"

            #add the next-state logic:
            #for edge leving the given state
            for edge in state.out_edges:
                
                #determine a JS condition for the given transition
                condition = algebra_to_JS(edge.condition, self.inputs)

                #if the condition is met, move to the next state
                buf.start_block('if(' + condition + ') {')
                buf += "state = STATE_" + edge.target + ";"
                buf.end_block('}')
                buf += ''

            buf += 'return;';
            buf.end_block()

        buf.end_block('}')
        buf.end_block('}')

        buf += ''

        #build the combinational logic for the circuit
        buf.start_block('function always() {')
        buf.start_block('switch(state) {')

        #enumerate each case in the FSM
        for state in self.states.values():
           
            #for each possible state:
            buf.start_block("case STATE_" + state.code + ":")
            
            #if we have outputs that should represent the current state, add them
            if state_outputs is not None:
                buf += '//Display the current state'
                buf += 'unsigned(' + repr(list(state_outputs)) + ', ' + state.code + ');'

            #if we have Moore outputs, handle them
            if self.moore_outputs:

                #set the Moore outputs
                buf += ''
                buf += "//Set the Moore outputs:"

                #set each of the Moore values appropriately
                for name, value in zip(self.moore_outputs, state.output):

                    #determine the logic value for the given output
                    logicValue = 'true' if value == '1' else 'false'

                    #and add the javascript which applies it
                    buf.add_call('logic', "'" + name +  "'", logicValue)


            #if we have Mealy outputs, handle them
            if self.mealy_outputs:

                #handle mealy outputs on a per-edge basis
                for edge in state.out_edges:
                    
                    #determine a JS condition for the given transition
                    condition = algebra_to_JS(edge.condition, self.inputs)

                    #if the condition is met, move to the next state
                    buf.start_block('if(' + condition + ') {')

                    #set each of the Moore values appropriately
                    for name, value in zip(self.mealy_outputs, edge.output):

                        #determine the logic value for the given output
                        logicValue = 'true' if value == '1' else 'false'

                        #and add the javascript which applies it
                        buf.add_call('logic', "'" + name +  "'", logicValue)


                    buf.end_block('}')
                    buf += ''

            buf += 'return;';
            buf.end_block()


        buf.end_block('}')
        buf.end_block('}')


        #return the resultant JS
        return buf

    
    def to_VHDL(self):
        
        buf = "library IEEE;\n"
        buf += 'use IEEE.std_logic_1164.all;\n\n'
        
        #entity declaration
        buf += 'entity fsm is\n'
        buf += '    port\n    (\n'
        buf += '        clk, reset : in STD_LOGIC;\n        '
        
        #
        # VHDL ENTITY
        #
        
        #inputs:
        for input in self.inputs:
            buf += input + ', ';
            
        #if we added inputs, terminate them
        if self.inputs:
                
            #strip the terminating comma, and end the input list
            buf = buf[:-2] + ' : in STD_LOGIC;\n        ' 
        
        #outputs:
        for output in self.outputs:
            buf += output + ', '
            
        #strip the terminating comma, and end the outputs list
        buf = buf[:-2] + ' : out STD_LOGIC\n'
        
        #end the entity
        buf += '    );\n'
        buf += 'end entity;\n\n'
        
        #
        # VHDL ARCHITECTURE
        #
        buf += 'architecture behavioral of fsm is\n'
        
        #create the state enumeration
        buf += '    type state_type is \n        ('
        
        #use each of the state codes to give name to the state enumeration
        for code in self.states.keys():
            buf += '\n            STATE_' + code + ','
        
        #strip the trailing comma, and end the state enumeration
        buf = buf[:-1] + '\n        );\n\n'
        
        buf += '    signal state : state_type := STATE_' + self.reset_state + ';\n'
        buf += '    signal next_state : state_type; \n\n'
        
        if self.mealy_outputs:
            if len(self.mealy_outputs) > 1:
                buf += '    signal mealy_out : std_logic_vector(' + str(len(self.mealy_outputs) - 1) + ' downto 0);\n'
            else:
                buf += '    signal mealy_out : std_logic;\n'
        
        if self.moore_outputs:
            if len(self.moore_outputs) > 1:
                buf += '    signal moore_out : std_logic_vector(' + str(len(self.moore_outputs) - 1) + ' downto 0);\n\n'
            else:
                buf += '    signal moore_out : std_logic;\n\n' 
        
        buf += 'begin\n\n'
        
        #
        # output assignments
        #
        
        if len(self.mealy_outputs) > 1:
            buf += '    (' + ', '.join(self.mealy_outputs) + ') <= mealy_out;\n'
        elif self.mealy_outputs:
            buf += '    ' + self.mealy_outputs[0] + ' <= mealy_out;\n'
            
        if len(self.moore_outputs) > 1:
            buf += '    (' + ', '.join(self.moore_outputs) + ') <= moore_out;\n'
        elif self.moore_outputs:
            buf += '    ' + self.moore_outputs[0] + ' <= moore_out;\n'            
        
        buf += '\n'
        
        #
        # register / reset process
        #
        
        buf += '    process(clk)\n'
        buf += '    begin\n'
        buf += '        if rising_edge(clk) then\n'
        buf += '            if reset = \'1\' then\n'
        buf += '                state <= STATE_' + self.reset_state + ';\n' 
        buf += '            else   \n'
        buf += '                state <= next_state;\n'
        buf += '            end if;\n'
        buf += '        end if;\n'
        buf += '    end process;\n\n'
        
        #
        # combinational process
        #
        
        buf += '    process(state, ' + ', '.join(self.inputs) + ')\n'
        buf += '    begin\n\n'
        buf += '        case state is\n\n'
        
        #for each state in the FSM
        for code, state in self.states.iteritems():
            
            buf += '            --original name: ' + state.name + '\n'
            
            buf += '            when STATE_' + code + ' =>\n\n' 
            
            #handle moore outputs
            if len(self.moore_outputs) > 1:
                #buf += '                moore_out <= "' + self.states[state].output.zfill(len(self.moore_outputs)) + '";\n\n'
                buf += '                moore_out <= "' + state.get_output_string(self.moore_outputs) + '";\n\n'
            elif self.moore_outputs:
                buf += '                moore_out <= \'' + state.get_output_string(self.moore_outputs) + '\';\n\n'
            
            
            #for each edge leaving the FSM
            for edge in state.out_edges:
               
                #rewrite me
                if edge.condition:
                    buf += '                if (' + algebra_to_VHDL(edge.condition, self.inputs) + ') = \'1\' then\n'
                else:
                    buf += '                if true then\n'
                
                
                buf += '                    next_state <= STATE_' + edge.target + ';\n'
                
                #if the given arc has mealy outputs, set their values
                if len(self.mealy_outputs) > 1:
                    buf += '                mealy_out <= "' + edge.output.zfill(len(self.mealy_outputs)) + '";\n'
                elif self.mealy_outputs:
                    buf += '                mealy_out <= \'' + edge.output + '\';\n'
                
                buf += '                end if;\n\n'
                
        
        
        buf += '        end case;\n\n'
        buf += '    end process;\n\n'
        
        buf += 'end architecture;\n'
            
        return buf

class FSMState:
    
    def __init__(self, name, code, output, out_edges = None):
        
        self.name = sanitize_name(name)
        self.code = code
        self.output = output
        
        #if out-edges have been specified, use them; otherwise, assume an empty list
        if out_edges:
            self.out_edges = out_edges
        else:
            self.out_edges = []

    def add_edge(self, edge):
        self.out_edges.append(edge)

    def __repr__(self):
        return '<FSMState "' + self.name + '" (' + str(self.code) +')>'

    def get_output_string(self, outputs):
        
        buf = ""

        for output_name in outputs:
            buf += self.output[output_name]

        return buf


       
    @classmethod
    def from_JSON(cls, element, code):

        #convert the integer state code to binary
        binCode = bin(code)[2:]

        #and create a new FSM state with the given code
        return cls(element['text'], binCode, outputs_from_enumeration(element['outputs']))
    
    @classmethod
    def from_XML(cls, element, outputs):
        
        #get the Moore outputs as a bit-string
        moore_outputs_raw = element.attrib['moore_outputs'];  

        #and convert it to a list of name=>value pairs
        moore_outputs = dict(zip(outputs, moore_outputs_raw))

        #return the newly-created FSM state
        return FSMState(element.text, element.attrib['code'], moore_outputs)
    
class FSMEdge:
    
    def __init__(self, source, target, condition, output=None):
        
        self.source = source
        self.target = target
        self.condition = condition
        self.output = output

    def __repr__(self):
        return '<FSMEdge (' + str(self.source) + ') -> (' + str(self.target) + ') @ "' + repr(self.condition) + '">'

    @classmethod
    def from_JSON(cls, json_edge):

        #determine if the given edge is a Don't Care
        is_dont_care = (not json_edge['text']) or (json_edge['text'].strip()) == '-'

        #extract the transition condition
        condition = None if is_dont_care else json_edge['text']

        #If we have a normal link, then split this into source and target.
        #Note that we convert the given integer state codes to binary, to match QFSM's format.
        if json_edge['type'] == 'Link':
            
            source = bin(json_edge['nodeA'])[2:]
            target = bin(json_edge['nodeB'])[2:]

        #Otherwise, if we have a self-link, both the source and the target are the given node.
        elif json_edge['type'] == 'SelfLink':
            source = target = bin(json_edge['node'])[2:]

        #create a new edge from the JSON node
        return cls(source, target, condition)

    @staticmethod
    def from_XML(xml_edge):
       
        try:
            #find the source state's code
            source = xml_edge.find('from').text
            
            #the target state's code
            target = xml_edge.find('to').text

        except AttributeError:
            print "ERROR:HDL: One of your arcs is not properly connected! Check for an illegal arc, which will be highlighted in red and will be disconnected on at least one side."
            sys.exit(10)
        
        #the transition condition (inputs)
        condition = xml_edge.find('inputs').text
        any_flag = xml_edge.find('inputs').attrib['any']
        
        #handle "always" / "Don't Care" arcs
        if any_flag == "1" or condition is None or condition.count('x') == len(condition) or condition == '-': # or condition.attrib['any']=='1':
            condition = None
        
        #and the Mealy outputs, if present
        output = xml_edge.find('outputs').text
        
        #return the newly created edge
        return FSMEdge(source, target, condition, output)

def main():
    
    #Enumerate the command line arguments, to automate argument parsing.
    parser = argparse.ArgumentParser(description='Converts a QFSM file to another language for simulation.')
    parser.add_argument('--language', '-l',  metavar='language', type=str, default='VHDL', help='The language in which to parse; valid options are VHDL or JavaScript');
    parser.add_argument('--stateout', '-s', metavar='state_outputs', type=str, default=None, help='A comma-delimited list of outputs which should be used to show the state. JS output only.');
    parser.add_argument('--clock', '--clk', '-c', metavar='clock_input', type=str, default='btn2', help='The name of the clock input for the given circuit. JS output only.');
    parser.add_argument('--reset', '--rst', '-r', metavar='reset_input', type=str, default='btn3', help='The name of the asynchronous reset input for the given circuit. JS output only.');
    parser.add_argument('fsm', metavar='fsm_file', type=open, help='A QFSM finite state machine description.')
    
    #Parse the command line arguments.
    args = parser.parse_args()

    #if provided, convert the state outputs from 
    if args.stateout is not None:
        state_outputs = [i.strip() for i in args.stateout.split(',')] 
    else:
        state_outputs = None

    #pass the FSM file recieved from the command line to the FSM parser 
    fsm = FSM.from_file(args.fsm) 

    #finally, print out the resultant FSM
    if args.language.lower() in ('javascript', 'js'):
        print fsm.to_javascript(state_outputs, args.clock, args.reset)
    else:
        print fsm.to_VHDL()


def algebra_to_VHDL(algebra_notation, inputs):
    
    #get an abstract syntax list which describes the internal logic
    asl = parse_algebraic(algebra_notation, inputs)
    
    #and convert that ASL to VHDL
    return asl_to_VHDL(asl)

def algebra_to_JS(algebra_notation, inputs):
    """
        Converts a Boolean-Algebra expression to FixedSim-syntax JS.
    """

    #get an abstract syntax list which describes the expression's logic
    asl = parse_algebraic(algebra_notation, inputs)

    #and convert that ASL to JavaScript
    return asl_to_JS(asl)


def asl_to_JS(asl):

    #base case: we've reached a leaf in the abstract syntax tree
    if not isinstance(asl, list):
        return "logic('" + asl + "')"
    
    #recursive case 1: unary operator (e.g. NOT)
    if asl[1] == "'":
        return '!' + asl_to_JS(asl[0])
    
    #recursive case 2: binary operator
    
    #AND
    if asl[1] == '*':
       
        #add a left parenthesis...
        buf = '('
        
        #then AND together each of the items in the abstract syntax list...
        for i in asl:

            #replacing each AND operation with the JS equivalent
            if i == '*':
                buf += ' && '

            #and evaluating each subexpression as far as possible
            else:
                buf += asl_to_JS(i)
                

        return buf + ')'
        
        #return '(' + asl_to_VHDL(asl[0]) + ' and ' + asl_to_VHDL(asl[2]) + ')'
        
    #OR
    if asl[1] == '+':
        
        buf = '('
        
        for i in asl:
            if i == '+':
                buf += ' || '
            else:
                buf += asl_to_JS(i)
                
        return buf + ')'
        
        #return '(' + asl_to_VHDL(asl[0]) + ' or ' + asl_to_VHDL(asl[2]) + ')'
    
    #XOR
    if asl[1] == '^':
        
        buf = '('
        
        for i in asl:
            if i == '^':
                buf + ' ^ '
            else:
                buf += asl_to_JS(i)
                
        return buf + ')'
    

def asl_to_VHDL(asl):    
    
    #base case: we've reached a leaf in the abstract syntax tree
    if not isinstance(asl, list):
        return asl
    
    #recursive case 1: unary operator (e.g. NOT)
    if asl[1] == "'":
        return 'not ' + asl_to_VHDL(asl[0])
    
    #recursive case 2: binary operator
    
    #AND
    if asl[1] == '*':
        
        buf = '('
        
        for i in asl:
            if i == '*':
                buf += ' and '
            else:
                buf += asl_to_VHDL(i)
                
        return buf + ')'
        
        #return '(' + asl_to_VHDL(asl[0]) + ' and ' + asl_to_VHDL(asl[2]) + ')'
        
    #OR
    if asl[1] == '+':
        
        buf = '('
        
        for i in asl:
            if i == '+':
                buf += ' or '
            else:
                buf += asl_to_VHDL(i)
                
        return buf + ')'
        
        #return '(' + asl_to_VHDL(asl[0]) + ' or ' + asl_to_VHDL(asl[2]) + ')'
    
    #XOR
    if asl[1] == '^':
        
        buf = '('
        
        for i in asl:
            if i == '^':
                buf + ' xor '
            else:
                buf += asl_to_VHDL(i)
                
        return buf + ')'
        
        #return '(' + asl_to_VHDL(asl[0]) + ' xor ' + asl_to_VHDL(asl[2]) + ')'


def inputs_from_algebra(algebra_notation):
    """

    """

    #parse the albebra notation into an abstract syntax list
    asl = parse_algebraic(algebra_notation)

    #and extract each of the unique symbols
    asl = set(flatten([asl]))

    #remove any logic symbols that exist in the string
    return asl.difference(set(('*', '\'', '+', '^')))


def outputs_from_enumeration(outputs):

    #define the way an output name can look
    identifiers = pyparsing.alphanums + '_[]'
    outputName = pyparsing.Word(identifiers)

    #define the way an output value can look
    outputValue = pyparsing.Word('01')

    #and define an output statement
    outputDefinition = pyparsing.ZeroOrMore(pyparsing.Group(outputName + pyparsing.Literal('=').suppress() + outputValue))

    #parse the string into a list of name-value pairs
    return dict(list(outputDefinition.parseString(outputs)))


def flatten(l):
    """
        Method from:
        http://stackoverflow.com/questions/2158395/flatten-an-irregular-list-of-lists-in-python
    """

    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el
    


def parse_algebraic(algebra_notation, inputs=None):
    
    
    #convert each of the VHDL input terms into a grammar literal
    if inputs:
        inputTerms = reduce(lambda x, y : x | pyparsing.Literal(y.strip()), inputs)
    else:
        #create a basic identifier grammar element
        IdentifierChars = pyparsing.alphanums + '_[]'
        inputTerms = pyparsing.Word(IdentifierChars)
    
    #define the algebra operators, in order of precedence
    algebraOperators = \
        [
            ("'", 1, pyparsing.opAssoc.LEFT), #NOT
            (pyparsing.Optional("*", default='*'), 2, pyparsing.opAssoc.LEFT), #AND, including implied AND
            ("+", 2, pyparsing.opAssoc.LEFT), #OR
            ("^", 2, pyparsing.opAssoc.LEFT)  #XOR
        ]
        
    #define a new grammar in terms of the input terms and algebraic operators
    algebraExpresion = pyparsing.operatorPrecedence(inputTerms, algebraOperators)
    
    #use the newly created grammar to convert the boolean expression into an abstract syntax list
    try:
        asl = algebraExpresion.parseString(algebra_notation)[0]
    except pyparsing.ParseException, e:
        print 'ERROR:HDL: Could not understand your arc condition "', algebra_notation, '". Your answer should have been a Boolean expression in terms of your FSM\'s inputs: ', inputs
        sys.exit(10); 
    
    #remove the PyParsing object wrapper from the list 
    if isinstance(asl, pyparsing.ParseResults):
        asl = asl.asList()
        
    #return the abstract syntax list
    return asl

def sanitize_name(name):
    
    #TODO
    return name
        

if __name__ == '__main__':
    main()
